name: IPFS Accelerate Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      test_type:
        description: 'Test type to run (model, hardware, api, integration, all)'
        required: false
        default: 'all'
      platform:
        description: 'Hardware platform (cuda, cpu, all)'
        required: false
        default: 'all'

jobs:
  # Static analysis job
  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort mypy
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Run linters
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        black --check .
        isort --check-only --profile black .
        mypy .

  # Main test matrix job for CPU tests
  test-cpu:
    runs-on: ubuntu-latest
    needs: lint
    strategy:
      fail-fast: false
      matrix:
        test-type: [model, api, integration]
        python-version: ['3.9', '3.10']
        include:
          - test-type: model
            test-scope: "--test-type model"
          - test-type: api
            test-scope: "--test-type api"
          - test-type: integration
            test-scope: "--test-type integration"
          # Skip hardware tests on CPU job since they're covered in GPU jobs
    
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        pip install pytest pytest-xdist pytest-html
    
    - name: Verify test environment
      run: |
        cd test
        python verify_test_environment.py
    
    - name: Run tests
      run: |
        cd test
        python run.py ${{ matrix.test-scope }} --platform cpu --junit-xml --report
    
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.test-type }}-cpu-py${{ matrix.python-version }}
        path: |
          test/test-results.xml
          test/report.html

  # GPU tests job
  test-gpu:
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'workflow_dispatch' || github.event_name == 'schedule' || contains(github.event.head_commit.message, '[run-gpu]') }}
    needs: lint
    strategy:
      fail-fast: false
      matrix:
        test-type: [model, hardware]
        include:
          - test-type: model
            test-scope: "--test-type model"
          - test-type: hardware
            test-scope: "--test-type hardware"
    
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        pip install pytest pytest-xdist pytest-html
    
    - name: Setup CUDA
      uses: Jimver/cuda-toolkit@v0.2.11
      with:
        cuda: '11.8.0'
        method: 'network'
    
    - name: Run tests
      run: |
        cd test
        python run.py ${{ matrix.test-scope }} --platform cuda --junit-xml --report
    
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.test-type }}-cuda
        path: |
          test/test-results.xml
          test/report.html

  # Web browser tests
  test-browser:
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'workflow_dispatch' || github.event_name == 'schedule' || contains(github.event.head_commit.message, '[run-browser]') }}
    needs: lint
    strategy:
      fail-fast: false
      matrix:
        browser: [chrome, firefox]
        include:
          - browser: chrome
            browser-opts: "--platform webgpu"
          - browser: firefox
            browser-opts: "--platform webnn"
    
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        pip install pytest pytest-xdist pytest-html selenium
    
    - name: Setup Chrome
      if: matrix.browser == 'chrome'
      uses: browser-actions/setup-chrome@latest
    
    - name: Setup Firefox
      if: matrix.browser == 'firefox'
      uses: browser-actions/setup-firefox@latest
    
    - name: Run browser tests
      run: |
        cd test
        # Set browser environment variables for tests
        export TEST_BROWSERS="${{ matrix.browser }}"
        export WEBGPU_AVAILABLE="true"
        export WEBGPU_BROWSERS="${{ matrix.browser }}"
        
        python run.py --test-type hardware ${{ matrix.browser-opts }} --junit-xml --report
    
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-browser-${{ matrix.browser }}
        path: |
          test/test-results.xml
          test/report.html

  # Distributed testing job
  test-distributed:
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'workflow_dispatch' || github.event_name == 'schedule' || contains(github.event.head_commit.message, '[run-distributed]') }}
    needs: test-cpu
    
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        pip install pytest pytest-xdist pytest-html
    
    - name: Run distributed tests
      run: |
        cd test
        
        # Start coordinator in background
        python -m ipfs_accelerate_py.distributed.coordinator --port 8765 --log-level info &
        COORDINATOR_PID=$!
        
        # Wait for coordinator to start
        sleep 5
        
        # Run tests in distributed mode
        python run.py --distributed --worker-count 4 --coordinator localhost:8765 --junit-xml --report
        
        # Stop coordinator
        kill $COORDINATOR_PID
    
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-distributed
        path: |
          test/test-results.xml
          test/report.html

  # Test report aggregation
  report:
    runs-on: ubuntu-latest
    needs: [test-cpu, test-gpu, test-browser, test-distributed]
    if: always()
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Download all artifacts
      uses: actions/download-artifact@v3
      with:
        path: artifacts
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install reporting dependencies
      run: |
        python -m pip install --upgrade pip
        pip install junit2html markdown
    
    - name: Generate combined report
      run: |
        mkdir -p combined-report
        
        # Combine XML reports
        echo "Generating combined XML report..."
        python -c '
        import glob
        from junit_xml import TestSuite, TestCase
        from xml.etree import ElementTree
        
        all_suites = []
        
        for xml_file in glob.glob("artifacts/**/test-results.xml"):
            try:
                tree = ElementTree.parse(xml_file)
                root = tree.getroot()
                for suite in root.findall(".//testsuite"):
                    suite_name = suite.get("name")
                    for case in suite.findall(".//testcase"):
                        case.set("classname", f"{os.path.basename(os.path.dirname(xml_file))}:{case.get("classname")}")
                    all_suites.append(suite)
            except Exception as e:
                print(f"Error processing {xml_file}: {e}")
        
        # Create a new XML
        new_root = ElementTree.Element("testsuites")
        for suite in all_suites:
            new_root.append(suite)
        
        ElementTree.ElementTree(new_root).write("combined-report/combined-results.xml")
        '
        
        # Convert to HTML
        echo "Generating HTML report..."
        junit2html combined-report/combined-results.xml combined-report/index.html
        
        # Create summary markdown
        echo "Generating summary markdown..."
        echo "# IPFS Accelerate Test Summary" > combined-report/summary.md
        echo "" >> combined-report/summary.md
        echo "## Test Results" >> combined-report/summary.md
        echo "" >> combined-report/summary.md
        
        python -c '
        import xml.etree.ElementTree as ET
        import os
        
        xml_file = "combined-report/combined-results.xml"
        tree = ET.parse(xml_file)
        root = tree.getroot()
        
        total_tests = 0
        total_failures = 0
        total_errors = 0
        total_skipped = 0
        
        for suite in root.findall(".//testsuite"):
            total_tests += int(suite.get("tests", 0))
            total_failures += int(suite.get("failures", 0))
            total_errors += int(suite.get("errors", 0))
            total_skipped += int(suite.get("skipped", 0))
        
        with open("combined-report/summary.md", "a") as f:
            f.write(f"- Total Tests: {total_tests}\n")
            f.write(f"- Passed: {total_tests - total_failures - total_errors - total_skipped}\n")
            f.write(f"- Failed: {total_failures}\n")
            f.write(f"- Errors: {total_errors}\n")
            f.write(f"- Skipped: {total_skipped}\n\n")
            
            f.write("## Test Categories\n\n")
            f.write("| Category | Tests | Passed | Failed | Skipped |\n")
            f.write("|----------|-------|--------|--------|--------|\n")
            
            categories = {}
            for suite in root.findall(".//testsuite"):
                category = suite.get("name", "").split(".")[0]
                if category not in categories:
                    categories[category] = {"tests": 0, "failures": 0, "errors": 0, "skipped": 0}
                
                categories[category]["tests"] += int(suite.get("tests", 0))
                categories[category]["failures"] += int(suite.get("failures", 0))
                categories[category]["errors"] += int(suite.get("errors", 0))
                categories[category]["skipped"] += int(suite.get("skipped", 0))
            
            for category, counts in categories.items():
                passed = counts["tests"] - counts["failures"] - counts["errors"] - counts["skipped"]
                f.write(f"| {category} | {counts['tests']} | {passed} | {counts['failures'] + counts['errors']} | {counts['skipped']} |\n")
        '
    
    - name: Upload combined report
      uses: actions/upload-artifact@v3
      with:
        name: combined-test-report
        path: combined-report/
    
    - name: Publish report to GitHub Pages
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      uses: JamesIves/github-pages-deploy-action@v4
      with:
        folder: combined-report
        branch: gh-pages
        target-folder: test-reports/latest