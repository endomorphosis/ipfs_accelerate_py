name: iOS Mobile CI

on:
  push:
    branches: [ main ]
    paths:
      - 'ipfs_accelerate_py/**'
      - 'test/ios_test_harness/**'
      - 'models/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'ipfs_accelerate_py/**'
      - 'test/ios_test_harness/**'
      - 'models/**'
  workflow_dispatch:
    inputs:
      models:
        description: 'Comma-separated list of models to test (leave empty for default)'
        required: false
        default: ''
      device_type:
        description: 'Device type (simulator or physical)'
        required: false
        default: 'simulator'
        options:
          - simulator
          - physical
      timeout:
        description: 'Benchmark timeout in seconds'
        required: false
        default: '3600'

jobs:
  ios-benchmark:
    name: iOS Benchmark
    runs-on: macos-latest
    
    strategy:
      matrix:
        simulator:
          - name: "iPhone 13"
            id: "iphone13"
          - name: "iPhone 14 Pro"
            id: "iphone14pro"
          - name: "iPad Pro (12.9-inch) (5th generation)"
            id: "ipadpro"
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r test/ios_test_harness/requirements.txt
      
      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable
      
      - name: Create benchmark directory
        run: mkdir -p benchmark_results
      
      - name: Download models
        run: |
          mkdir -p models
          python test/ios_test_harness/download_test_models.py
      
      - name: List available simulators
        run: xcrun simctl list
      
      - name: Create simulator if needed
        if: ${{ github.event.inputs.device_type != 'physical' }}
        run: |
          # Check if the simulator already exists
          DEVICE_ID=$(xcrun simctl list | grep "${{ matrix.simulator.name }}" | grep -v "unavailable" | head -1 | sed -E 's/.*\(([A-Za-z0-9-]+)\).*/\1/')
          
          if [[ -z "$DEVICE_ID" ]]; then
            echo "Creating simulator: ${{ matrix.simulator.name }}"
            # Create the simulator with the latest iOS runtime
            LATEST_RUNTIME=$(xcrun simctl list runtimes | grep iOS | tail -1 | sed -E 's/.*iOS ([0-9.]+).* - (.+) \((.+)\)/\3/')
            DEVICE_ID=$(xcrun simctl create "${{ matrix.simulator.name }}" "com.apple.CoreSimulator.SimDeviceType.$(echo "${{ matrix.simulator.name }}" | sed 's/ /-/g' | sed 's/[()]//g')" "$LATEST_RUNTIME")
            echo "Created simulator with ID: $DEVICE_ID"
          else
            echo "Using existing simulator with ID: $DEVICE_ID"
          fi
          
          echo "SIMULATOR_DEVICE_ID=$DEVICE_ID" >> $GITHUB_ENV
      
      - name: Boot simulator
        if: ${{ github.event.inputs.device_type != 'physical' }}
        run: |
          echo "Booting simulator: $SIMULATOR_DEVICE_ID"
          xcrun simctl boot $SIMULATOR_DEVICE_ID
          
          # Wait for simulator to boot completely
          RETRY_COUNT=0
          BOOT_WAIT_SECONDS=30
          
          echo "Waiting for simulator to boot..."
          sleep $BOOT_WAIT_SECONDS
          
          while [[ $RETRY_COUNT -lt 3 ]]; do
            STATUS=$(xcrun simctl list | grep $SIMULATOR_DEVICE_ID | grep -o "(Booted)" || echo "")
            if [[ "$STATUS" == "(Booted)" ]]; then
              echo "Simulator booted successfully!"
              break
            else
              echo "Simulator not fully booted, retrying..."
              sleep $BOOT_WAIT_SECONDS
              RETRY_COUNT=$((RETRY_COUNT + 1))
            fi
          done
      
      - name: Run benchmark on simulator
        if: ${{ github.event.inputs.device_type != 'physical' }}
        run: |
          # Get models list from input or use defaults
          MODELS_LIST=""
          if [[ -n "${{ github.event.inputs.models }}" ]]; then
            MODELS_INPUT="${{ github.event.inputs.models }}"
            # Create JSON model list
            python -c "import json; models = '$MODELS_INPUT'.split(','); print(json.dumps([{'name': m.strip(), 'path': f'models/{m.strip()}.mlmodel', 'type': 'coreml', 'batch_sizes': [1], 'iterations': 20, 'priority': 'high'} for m in models]))" > models.json
            MODELS_LIST="--model-list models.json"
          fi
          
          # Set timeout from input or use default
          TIMEOUT="${{ github.event.inputs.timeout }}"
          if [[ -z "$TIMEOUT" ]]; then
            TIMEOUT="3600"
          fi
          
          # Run benchmarks
          python test/ios_test_harness/run_ci_benchmarks.py \
            --device-id $SIMULATOR_DEVICE_ID \
            --simulator \
            --output-db benchmark_results/${{ matrix.simulator.id }}_results.duckdb \
            $MODELS_LIST \
            --timeout $TIMEOUT \
            --verbose
      
      - name: Run benchmark on physical device
        if: ${{ github.event.inputs.device_type == 'physical' }}
        run: |
          # List connected devices
          DEVICES=$(xcrun xctrace list devices | grep -v "^==" | grep -v "Simulator" | grep -v "^$" | awk -F' \\(' '{print $1 "," $2}' | sed 's/)//')
          
          # Check if any devices are connected
          if [[ -z "$DEVICES" ]]; then
            echo "No physical devices found. Exiting."
            exit 1
          fi
          
          # Get first available device
          DEVICE_INFO=$(echo "$DEVICES" | head -1)
          DEVICE_NAME=$(echo "$DEVICE_INFO" | cut -d',' -f1)
          DEVICE_ID=$(echo "$DEVICE_INFO" | cut -d',' -f2)
          
          echo "Running benchmarks on physical device: $DEVICE_NAME with ID: $DEVICE_ID"
          
          # Get models list from input or use defaults
          MODELS_LIST=""
          if [[ -n "${{ github.event.inputs.models }}" ]]; then
            MODELS_INPUT="${{ github.event.inputs.models }}"
            # Create JSON model list
            python -c "import json; models = '$MODELS_INPUT'.split(','); print(json.dumps([{'name': m.strip(), 'path': f'models/{m.strip()}.mlmodel', 'type': 'coreml', 'batch_sizes': [1], 'iterations': 20, 'priority': 'high'} for m in models]))" > models.json
            MODELS_LIST="--model-list models.json"
          fi
          
          # Set timeout from input or use default
          TIMEOUT="${{ github.event.inputs.timeout }}"
          if [[ -z "$TIMEOUT" ]]; then
            TIMEOUT="3600"
          fi
          
          # Run benchmarks
          python test/ios_test_harness/run_ci_benchmarks.py \
            --device-id $DEVICE_ID \
            --output-db benchmark_results/${{ matrix.simulator.id }}_results.duckdb \
            $MODELS_LIST \
            --timeout $TIMEOUT \
            --verbose
      
      - name: Shutdown simulator
        if: ${{ github.event.inputs.device_type != 'physical' && always() }}
        run: |
          if [[ -n "$SIMULATOR_DEVICE_ID" ]]; then
            echo "Shutting down simulator: $SIMULATOR_DEVICE_ID"
            xcrun simctl shutdown $SIMULATOR_DEVICE_ID || true
          fi
      
      - name: Upload benchmark database
        uses: actions/upload-artifact@v3
        with:
          name: ios-benchmark-${{ matrix.simulator.id }}
          path: benchmark_results/${{ matrix.simulator.id }}_results.duckdb
      
      - name: Upload benchmark reports
        uses: actions/upload-artifact@v3
        with:
          name: ios-benchmark-reports-${{ matrix.simulator.id }}
          path: ios_benchmark_results/