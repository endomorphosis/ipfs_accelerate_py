# Cloud Deployment Configuration
# Comprehensive multi-cloud deployment templates for enterprise production

# AWS CloudFormation Template
AWSTemplateFormatVersion: '2010-09-09'
Description: 'IPFS Accelerate Python - Enterprise ML Platform'

Parameters:
  InstanceType:
    Type: String
    Default: t3.large
    Description: EC2 instance type for ML workloads
  
  Environment:
    Type: String
    Default: production
    AllowedValues: [development, staging, production]
    
Resources:
  # Auto Scaling Group for high availability
  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: ipfs-accelerate-template
      LaunchTemplateData:
        ImageId: ami-0c02fb55956c7d316  # Amazon Linux 2
        InstanceType: !Ref InstanceType
        SecurityGroupIds:
          - !Ref SecurityGroup
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            yum update -y
            yum install -y docker python3 python3-pip
            systemctl start docker
            systemctl enable docker
            pip3 install ipfs-accelerate-py
            # Start application
            python3 -m ipfs_accelerate_py.main --production
  
  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplate
        Version: !GetAtt LaunchTemplate.LatestVersionNumber
      MinSize: 2
      MaxSize: 10
      DesiredCapacity: 3
      VPCZoneIdentifier:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      HealthCheckType: ELB
      HealthCheckGracePeriod: 300

  # Load Balancer for traffic distribution
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: ipfs-accelerate-alb
      Scheme: internet-facing
      Type: application
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups:
        - !Ref SecurityGroup

---
# Azure Resource Manager Template
{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "vmSize": {
      "type": "string",
      "defaultValue": "Standard_D2s_v3",
      "metadata": {
        "description": "Virtual machine size for ML workloads"
      }
    },
    "environment": {
      "type": "string",
      "defaultValue": "production",
      "allowedValues": ["development", "staging", "production"]
    }
  },
  "resources": [
    {
      "type": "Microsoft.Compute/virtualMachineScaleSets",
      "apiVersion": "2021-11-01",
      "name": "ipfs-accelerate-vmss",
      "location": "[resourceGroup().location]",
      "properties": {
        "sku": {
          "name": "[parameters('vmSize')]",
          "capacity": 3
        },
        "virtualMachineProfile": {
          "osProfile": {
            "computerNamePrefix": "ipfs-ml",
            "adminUsername": "azureuser",
            "customData": "[base64(concat('#!/bin/bash\napt-get update\napt-get install -y python3 python3-pip docker.io\nsystemctl start docker\nsystemctl enable docker\npip3 install ipfs-accelerate-py\npython3 -m ipfs_accelerate_py.main --production'))]"
          },
          "storageProfile": {
            "imageReference": {
              "publisher": "Canonical",
              "offer": "0001-com-ubuntu-server-focal",
              "sku": "20_04-lts-gen2",
              "version": "latest"
            }
          }
        }
      }
    }
  ]
}

---
# Google Cloud Deployment Manager Template
resources:
- name: ipfs-accelerate-instance-template
  type: compute.v1.instanceTemplate
  properties:
    properties:
      machineType: e2-standard-4
      disks:
      - deviceName: boot
        type: PERSISTENT
        boot: true
        autoDelete: true
        initializeParams:
          sourceImage: projects/ubuntu-os-cloud/global/images/family/ubuntu-2004-lts
      networkInterfaces:
      - network: global/networks/default
        accessConfigs:
        - name: External NAT
          type: ONE_TO_ONE_NAT
      metadata:
        items:
        - key: startup-script
          value: |
            #!/bin/bash
            apt-get update
            apt-get install -y python3 python3-pip docker.io
            systemctl start docker
            systemctl enable docker
            pip3 install ipfs-accelerate-py
            python3 -m ipfs_accelerate_py.main --production

- name: ipfs-accelerate-igm
  type: compute.v1.instanceGroupManager
  properties:
    zone: us-central1-a
    instanceTemplate: $(ref.ipfs-accelerate-instance-template.selfLink)
    targetSize: 3
    baseInstanceName: ipfs-accelerate
    autoHealingPolicies:
    - healthCheck: $(ref.health-check.selfLink)
      initialDelaySec: 300

- name: health-check
  type: compute.v1.httpHealthCheck
  properties:
    port: 8080
    requestPath: /health
    checkIntervalSec: 30
    timeoutSec: 10
    healthyThreshold: 2
    unhealthyThreshold: 3