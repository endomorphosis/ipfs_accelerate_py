version: '3.8'

services:
  ipfs-accelerate-py:
    build: 
      context: ..
      dockerfile: deployments/Dockerfile
    restart: unless-stopped
    environment:
      - IPFS_ACCELERATE_ENV=production
      - LOG_LEVEL=INFO
    ports:
      - "8000:8000"
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
    healthcheck:
      test: ["CMD", "python", "deployments/health_check.py"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - ipfs-accelerate-network
    
  prometheus:
    image: prom/prometheus:latest
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    networks:
      - ipfs-accelerate-network
      
  grafana:
    image: grafana/grafana:latest
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana:/etc/grafana/provisioning
    networks:
      - ipfs-accelerate-network

volumes:
  prometheus_data:
  grafana_data:

networks:
  ipfs-accelerate-network:
    driver: bridge