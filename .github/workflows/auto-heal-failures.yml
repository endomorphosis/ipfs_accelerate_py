name: Auto-Heal Workflow Failures

on:
  workflow_run:
    # Monitor specific workflows (excluding auto-heal itself and documentation maintenance)
    workflows:
      - "AMD64 CI/CD Pipeline"
      - "ARM64 CI/CD Pipeline"
      - "Multi-Architecture CI/CD Pipeline"
      - "Package Installation Test"
      - "Test Auto-Heal System"
    types:
      - completed
  workflow_dispatch:
    inputs:
      run_id:
        description: 'Workflow run ID to analyze (for testing)'
        required: false
        type: string

permissions:
  contents: write
  pull-requests: write
  issues: write
  actions: read

jobs:
  detect-and-heal:
    runs-on: ubuntu-latest
    # Only trigger if this is a workflow_run event AND the workflow failed, OR if manually dispatched
    if: ${{ (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'failure') || github.event_name == 'workflow_dispatch' }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
      
      - name: Install dependencies
        run: |
          pip install requests PyGithub

      - name: Analyze workflow failure
        id: analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          WORKFLOW_RUN_ID: ${{ github.event.workflow_run.id || github.event.inputs.run_id }}
          WORKFLOW_NAME: ${{ github.event.workflow_run.name || 'Manual Test' }}
          WORKFLOW_URL: ${{ github.event.workflow_run.html_url || format('https://github.com/{0}/actions/runs/{1}', github.repository, github.event.inputs.run_id) }}
          REPOSITORY: ${{ github.repository }}
        run: |
          cat > analyze_failure.py << 'PYTHON'
          import os
          import sys
          import json
          import requests
          from datetime import datetime
          
          # Get environment variables
          token = os.environ['GITHUB_TOKEN']
          run_id = os.environ['WORKFLOW_RUN_ID']
          workflow_name = os.environ['WORKFLOW_NAME']
          workflow_url = os.environ['WORKFLOW_URL']
          repository = os.environ['REPOSITORY']
          
          if not run_id or run_id == 'None':
              print("Error: WORKFLOW_RUN_ID is not set", file=sys.stderr)
              sys.exit(1)
          
          headers = {
              'Authorization': f'Bearer {token}',
              'Accept': 'application/vnd.github.v3+json'
          }
          
          # Get workflow run details
          run_url = f'https://api.github.com/repos/{repository}/actions/runs/{run_id}'
          response = requests.get(run_url, headers=headers)
          
          if response.status_code != 200:
              print(f"Error fetching workflow run: {response.status_code}", file=sys.stderr)
              print(f"Response: {response.text}", file=sys.stderr)
              sys.exit(1)
          
          run_data = response.json()
          
          # Get jobs for this run
          jobs_url = f'https://api.github.com/repos/{repository}/actions/runs/{run_id}/jobs'
          jobs_response = requests.get(jobs_url, headers=headers)
          
          if jobs_response.status_code != 200:
              print(f"Error fetching jobs: {jobs_response.status_code}", file=sys.stderr)
              # Continue with empty jobs list if we can't get jobs
              jobs_data = {'jobs': []}
          else:
              jobs_data = jobs_response.json()
          
          # Find failed jobs
          failed_jobs = []
          for job in jobs_data.get('jobs', []):
              if job['conclusion'] == 'failure':
                  failed_jobs.append({
                      'name': job['name'],
                      'id': job['id'],
                      'steps': [
                          {
                              'name': step['name'],
                              'conclusion': step.get('conclusion'),
                              'number': step['number']
                          }
                          for step in job.get('steps', [])
                          if step.get('conclusion') == 'failure'
                      ]
                  })
          
          # Get logs for failed jobs
          failure_details = []
          for job in failed_jobs:
              logs_url = f'https://api.github.com/repos/{repository}/actions/jobs/{job["id"]}/logs'
              logs_response = requests.get(logs_url, headers=headers)
              
              # Get last 100 lines of logs for context
              if logs_response.status_code == 200:
                  log_lines = logs_response.text.split('\n')
                  # Look for error patterns
                  error_lines = [
                      line for line in log_lines[-200:]
                      if any(keyword in line.lower() for keyword in [
                          'error', 'failed', 'exception', 'traceback', 
                          'fatal', 'panic', 'exit code'
                      ])
                  ]
                  
                  failure_details.append({
                      'job_name': job['name'],
                      'failed_steps': [s['name'] for s in job['steps']],
                      'error_logs': '\n'.join(error_lines[-50:])  # Last 50 error lines
                  })
          
          # Create analysis summary
          analysis = {
              'workflow_name': workflow_name,
              'workflow_url': workflow_url,
              'run_id': run_id,
              'failed_at': run_data.get('updated_at', datetime.utcnow().isoformat()),
              'branch': run_data.get('head_branch', 'unknown'),
              'commit_sha': run_data.get('head_sha', 'unknown'),
              'failed_jobs_count': len(failed_jobs),
              'failed_jobs': failed_jobs,
              'failure_details': failure_details
          }
          
          # Write analysis to file
          with open('failure_analysis.json', 'w') as f:
              json.dump(analysis, f, indent=2)
          
          # Create summary for GitHub Actions
          print(f"Workflow: {workflow_name}")
          print(f"Failed jobs: {len(failed_jobs)}")
          print(f"Branch: {analysis['branch']}")
          print(f"Commit: {analysis['commit_sha'][:7]}")
          
          # Set output for next step
          with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
              f.write(f"workflow_name={workflow_name}\n")
              f.write(f"failed_jobs_count={len(failed_jobs)}\n")
              f.write(f"branch={analysis['branch']}\n")
              f.write(f"commit_sha={analysis['commit_sha']}\n")
          
          sys.exit(0)
          PYTHON
          
          python analyze_failure.py
      
      - name: Run advanced failure analysis
        id: advanced_analysis
        continue-on-error: true
        run: |
          if python .github/scripts/workflow_failure_analyzer.py failure_analysis.json; then
            echo "analysis_completed=true" >> $GITHUB_OUTPUT
            echo "Advanced analysis completed successfully"
          else
            echo "analysis_completed=false" >> $GITHUB_OUTPUT
            echo "Warning: Advanced analysis failed, continuing with basic analysis"
          fi
      
      - name: Generate failure report
        id: report
        run: |
          cat > generate_report.py << 'PYTHON'
          import json
          import os
          
          # Load analysis
          with open('failure_analysis.json', 'r') as f:
              analysis = json.load(f)
          
          # Load advanced analysis if available
          advanced_analysis = None
          if os.path.exists('detailed_analysis.json'):
              with open('detailed_analysis.json', 'r') as f:
                  advanced_analysis = json.load(f)
          
          # Generate markdown report
          report = f"""# Workflow Failure Analysis Report
          
          ## Summary
          
          - **Workflow**: {analysis['workflow_name']}
          - **Run ID**: {analysis['run_id']}
          - **Branch**: {analysis['branch']}
          - **Commit**: {analysis['commit_sha'][:7]}
          - **Failed Jobs**: {analysis['failed_jobs_count']}
          - **Failed At**: {analysis['failed_at']}
          """
          
          # Add advanced analysis if available
          if advanced_analysis:
              confidence_emoji = "🟢" if advanced_analysis['confidence'] > 0.8 else "🟡" if advanced_analysis['confidence'] > 0.6 else "🔴"
              report += f"""
          
          ## Advanced Analysis
          
          {confidence_emoji} **Confidence Level**: {advanced_analysis['confidence'] * 100:.1f}%
          
          - **Category**: {advanced_analysis['category'].upper()}
          - **Description**: {advanced_analysis['description']}
          
          ### Root Cause
          
          ```
          {advanced_analysis['root_cause']}
          ```
          
          ### Affected Files
          
          {chr(10).join(f'- `{f}`' for f in advanced_analysis.get('affected_files', [])) if advanced_analysis.get('affected_files') else '_No specific files identified_'}
          
          ### Recommended Fixes
          
          {chr(10).join(f'{i+1}. {fix}' for i, fix in enumerate(advanced_analysis['suggested_fixes']))}
          """
          
          report += """
          
          ## Failure Details
          
          """
          
          for detail in analysis['failure_details']:
              report += f"""### Job: {detail['job_name']}
          
          **Failed Steps**: {', '.join(detail['failed_steps'])}
          
          **Error Logs**:
          ```
          {detail['error_logs']}
          ```
          
          """
          
          report += f"""
          ## Action Required
          
          This failure has been detected by the auto-healing system. A GitHub Copilot Workspace 
          agent will analyze the failure and attempt to create a fix.
          
          ### Next Steps
          
          1. Review the failure logs above
          2. GitHub Copilot will analyze the root cause
          3. An automated fix will be proposed in a pull request
          4. Review and test the proposed fix
          5. Merge if the fix resolves the issue
          
          ## Links
          
          - [Workflow Run]({analysis['workflow_url']})
          - [Commit](https://github.com/${{{{ github.repository }}}}/commit/{analysis['commit_sha']})
          
          ---
          *This report was automatically generated by the Auto-Heal Workflow Failures system.*
          """
          
          # Save report
          with open('failure_report.md', 'w') as f:
              f.write(report)
          
          # Create condensed version for issue body
          issue_body = report.replace('```', '```text')  # Ensure code blocks render
          with open('issue_body.md', 'w') as f:
              f.write(issue_body)
          
          print("Failure report generated")
          PYTHON
          
          python generate_report.py
          
          # Display report
          cat failure_report.md
      
      - name: Create healing context file
        run: |
          RUN_ID="${{ github.event.workflow_run.id || github.event.inputs.run_id }}"
          TIMESTAMP="${{ github.event.workflow_run.updated_at || '' }}"
          if [ -z "$TIMESTAMP" ]; then
            TIMESTAMP=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          fi
          
          cat > healing_context.json << EOF
          {
            "workflow_name": "${{ steps.analyze.outputs.workflow_name }}",
            "failed_jobs_count": "${{ steps.analyze.outputs.failed_jobs_count }}",
            "branch": "${{ steps.analyze.outputs.branch }}",
            "commit_sha": "${{ steps.analyze.outputs.commit_sha }}",
            "run_id": "${RUN_ID}",
            "repository": "${{ github.repository }}",
            "timestamp": "${TIMESTAMP}"
          }
          EOF
          
          cat healing_context.json
      
      - name: Create issue for tracking
        id: create_issue
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const issueBody = fs.readFileSync('issue_body.md', 'utf8');
            
            const issue = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `🔧 Auto-Heal: ${{ steps.analyze.outputs.workflow_name }} Failed (Run #${{ github.event.workflow_run.id || github.event.inputs.run_id }})`,
              body: issueBody,
              labels: ['auto-heal', 'workflow-failure', 'automated']
            });
            
            console.log(`Created issue #${issue.data.number}`);
            return issue.data.number;
      
      - name: Create auto-heal branch
        id: create_branch
        run: |
          # Use workflow_run.id or fall back to inputs.run_id for manual dispatches
          RUN_ID="${{ github.event.workflow_run.id || github.event.inputs.run_id }}"
          BRANCH_NAME="auto-heal/workflow-${RUN_ID}-$(date +%s)"
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          # Create new branch from the failed commit
          git checkout -b "$BRANCH_NAME" ${{ steps.analyze.outputs.commit_sha }}
          
          # Push the branch to remote so it's accessible
          git push origin "$BRANCH_NAME"
          
          echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT
          echo "Created and pushed branch: $BRANCH_NAME"
      
      - name: Prepare Copilot healing request
        run: |
          cat > copilot_healing_prompt.md << 'EOF'
          # GitHub Copilot Auto-Healing Request
          
          ## Context
          
          A GitHub Actions workflow has failed and requires automatic remediation.
          
          ## Failure Information
          
          - **Workflow**: ${{ steps.analyze.outputs.workflow_name }}
          - **Branch**: ${{ steps.analyze.outputs.branch }}
          - **Commit**: ${{ steps.analyze.outputs.commit_sha }}
          - **Failed Jobs**: ${{ steps.analyze.outputs.failed_jobs_count }}
          
          ## Task
          
          Analyze the failure logs in `failure_analysis.json` and:
          
          1. Identify the root cause of the workflow failure
          2. Determine which files need to be modified to fix the issue
          3. Make the minimal necessary changes to fix the workflow
          4. Ensure the fix doesn't break other workflows or tests
          5. Add any necessary documentation about the fix
          
          ## Analysis Data
          
          The complete failure analysis is available in `failure_analysis.json` and `failure_report.md`.
          
          ## Expected Outcome
          
          - Modified workflow files (if the issue is in the workflow itself)
          - Modified source code (if the issue is in the application code)
          - Updated tests (if needed to prevent regression)
          - Clear commit message explaining the fix
          
          ## Guidelines
          
          - Make minimal changes necessary to fix the issue
          - Preserve existing functionality
          - Follow the project's coding standards
          - Add comments explaining any non-obvious changes
          - Update documentation if the fix changes behavior
          
          EOF
          
          cat copilot_healing_prompt.md
      
      - name: Apply automated fixes
        id: apply_fixes
        continue-on-error: true
        run: |
          # Apply automated fixes for common issues
          if [ -f "detailed_analysis.json" ]; then
            python .github/scripts/auto_fix_common_issues.py failure_analysis.json detailed_analysis.json
            
            # Check if any changes were made
            if git diff --quiet; then
              echo "fixes_applied=false" >> $GITHUB_OUTPUT
              echo "No automated fixes could be applied"
            else
              echo "fixes_applied=true" >> $GITHUB_OUTPUT
              
              # Stage and commit the changes
              git add -A
              git commit -m "Auto-heal: Apply automated fixes for ${{ steps.analyze.outputs.workflow_name }}

              Automated fixes applied by auto-healing system:
              - Workflow: ${{ steps.analyze.outputs.workflow_name }}
              - Run ID: ${{ github.event.workflow_run.id || github.event.inputs.run_id }}
              - Branch: ${{ steps.analyze.outputs.branch }}
              
              This commit contains automated fixes for common issues detected in the workflow failure.
              Please review the changes carefully before merging.
              
              Related issue: Will be linked in PR"
              
              # Push the changes to the remote branch
              git push origin "${{ steps.create_branch.outputs.branch_name }}"
              
              echo "Automated fixes applied and pushed"
              
              # Load the fix summary
              if [ -f "auto_fix_summary.json" ]; then
                cat auto_fix_summary.json
              fi
            fi
          else
            echo "fixes_applied=false" >> $GITHUB_OUTPUT
            echo "Detailed analysis not available, skipping automated fixes"
          fi
      
      - name: Create Pull Request with fixes
        id: create_pr
        if: steps.apply_fixes.outputs.fixes_applied == 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            
            // Load fix summary if available
            let fixSummary = '';
            if (fs.existsSync('auto_fix_summary.json')) {
              const summary = JSON.parse(fs.readFileSync('auto_fix_summary.json', 'utf8'));
              if (summary.fixes_applied && summary.fixes_applied.length > 0) {
                fixSummary = '### Automated Fixes Applied\n\n' + 
                  summary.fixes_applied.map(fix => `- ${fix}`).join('\n');
              }
            }
            
            // Load analysis for PR description
            const analysis = JSON.parse(fs.readFileSync('failure_analysis.json', 'utf8'));
            let detailedAnalysis = '';
            if (fs.existsSync('detailed_analysis.json')) {
              const detailed = JSON.parse(fs.readFileSync('detailed_analysis.json', 'utf8'));
              detailedAnalysis = `### Root Cause Analysis

            **Category**: ${detailed.category || 'Unknown'}
            **Confidence**: ${detailed.confidence ? (detailed.confidence * 100).toFixed(1) + '%' : 'N/A'}
            **Description**: ${detailed.description || 'N/A'}

            ${detailed.root_cause ? '**Root Cause**:\n```\n' + detailed.root_cause + '\n```' : ''}
            `;
            }
            
            const prBody = `## 🤖 Automated Workflow Fix

            This PR was automatically generated by the Auto-Heal system to fix a workflow failure.

            ${fixSummary}

            ### Failure Details

            - **Workflow**: ${{ steps.analyze.outputs.workflow_name }}
            - **Run ID**: ${{ github.event.workflow_run.id || github.event.inputs.run_id }}
            - **Branch**: ${{ steps.analyze.outputs.branch }}
            - **Commit**: ${{ steps.analyze.outputs.commit_sha }}
            - **Failed Jobs**: ${{ steps.analyze.outputs.failed_jobs_count }}
            - **Tracking Issue**: #${{ steps.create_issue.outputs.result }}

            ${detailedAnalysis}

            ### Testing Checklist

            - [ ] All tests pass
            - [ ] No new errors introduced
            - [ ] Original workflow issue is fixed
            - [ ] Changes reviewed for correctness

            ### Review Checklist

            - [ ] Verify the fix addresses the root cause
            - [ ] Check for any side effects
            - [ ] Ensure coding standards are maintained
            - [ ] Test the workflow with these changes

            ### Next Steps

            1. Review the automated changes
            2. Run the affected workflow to verify the fix
            3. Merge if all checks pass
            4. Close tracking issue #${{ steps.create_issue.outputs.result }}

            ---
            *This PR was created by the GitHub Actions Auto-Healing system*
            *Fixes: #${{ steps.create_issue.outputs.result }}*`;

            try {
              const pr = await github.rest.pulls.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `🤖 Auto-Heal: Fix ${{ steps.analyze.outputs.workflow_name }} (Run #${{ github.event.workflow_run.id || github.event.inputs.run_id }})`,
                head: '${{ steps.create_branch.outputs.branch_name }}',
                base: '${{ steps.analyze.outputs.branch }}',
                body: prBody,
                draft: false
              });

              console.log(`Created PR #${pr.data.number}`);
              
              // Add labels to the PR
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr.data.number,
                labels: ['auto-heal', 'automated-fix', 'needs-review']
              });
              
              // Link the PR to the issue
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: ${{ steps.create_issue.outputs.result }},
                body: `🎉 Automated fixes have been applied!\n\nPull Request: #${pr.data.number}\n\nPlease review and test the changes.`
              });
              
              return pr.data.number;
            } catch (error) {
              console.error('Failed to create PR:', error);
              throw error;
            }
      
      - name: Upload analysis artifacts
        uses: actions/upload-artifact@v4
        with:
          name: workflow-failure-analysis-${{ github.event.workflow_run.id || github.event.inputs.run_id }}
          path: |
            failure_analysis.json
            failure_report.md
            healing_context.json
            copilot_healing_prompt.md
            detailed_analysis.json
            copilot_detailed_prompt.md
            auto_fix_summary.json
          retention-days: 30
      

      - name: Create draft PR and invoke GitHub Copilot
        id: create_placeholder_pr
        if: steps.apply_fixes.outputs.fixes_applied != 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const analysis = JSON.parse(fs.readFileSync('failure_analysis.json', 'utf8'));
            
            // Load detailed analysis if available
            let detailedAnalysis = '';
            let suggestedFixes = '';
            if (fs.existsSync('detailed_analysis.json')) {
              const detailed = JSON.parse(fs.readFileSync('detailed_analysis.json', 'utf8'));
              detailedAnalysis = `### Root Cause Analysis
            
            **Category**: ${detailed.category || 'Unknown'}
            **Confidence**: ${detailed.confidence ? (detailed.confidence * 100).toFixed(1) + '%' : 'N/A'}
            **Description**: ${detailed.description || 'N/A'}
            
            ${detailed.root_cause ? '**Root Cause**:\n```\n' + detailed.root_cause + '\n```' : ''}
            `;
              
              suggestedFixes = detailed.suggested_fixes ? 
                detailed.suggested_fixes.map((fix, i) => `${i+1}. ${fix}`).join('\n') : 
                'No specific suggestions available';
            }
            
            // Get error logs summary
            const errorLogsSummary = analysis.failure_details && analysis.failure_details[0] ? 
              analysis.failure_details[0].error_logs.substring(0, 1000) : 
              'See tracking issue for full logs';
            
            const prBody = `## 🤖 Auto-Heal: Workflow Failure Detected
            
            This draft PR was automatically created by the Auto-Heal system. GitHub Copilot should analyze and implement fixes.
            
            ### Failure Context
            
            - **Workflow**: ${{ steps.analyze.outputs.workflow_name }}
            - **Run ID**: ${{ github.event.workflow_run.id || github.event.inputs.run_id }}
            - **Branch**: ${{ steps.analyze.outputs.branch }}
            - **Commit**: ${{ steps.analyze.outputs.commit_sha }}
            - **Failed Jobs**: ${{ steps.analyze.outputs.failed_jobs_count }}
            - **Tracking Issue**: #${{ steps.create_issue.outputs.result }}
            - **Failed Workflow Run**: ${{ github.event.workflow_run.html_url || format('https://github.com/{0}/actions/runs/{1}', github.repository, github.event.inputs.run_id) }}
            
            ${detailedAnalysis}
            
            ### Error Logs Summary
            
            \`\`\`
            ${errorLogsSummary}
            \`\`\`
            
            ### Suggested Fixes
            
            ${suggestedFixes}
            
            ### Task
            
            @copilot Please analyze the workflow failure described above and implement fixes to resolve the issue:
            
            1. Review the failure analysis and error logs
            2. Identify the root cause
            3. Implement the minimal necessary fixes
            4. Ensure the fix doesn't break other functionality
            5. Test that the workflow passes after your changes
            
            **Important**: Make minimal, surgical changes to fix only the identified issue. Focus on the specific failure indicated in the logs.
            
            ### Testing Checklist
            
            - [ ] Root cause identified
            - [ ] Fix implemented
            - [ ] All tests pass
            - [ ] No new errors introduced
            - [ ] Original workflow issue is fixed
            
            ---
            *Auto-generated by Auto-Heal System*
            *Issue: #${{ steps.create_issue.outputs.result }}*`;
            
            try {
              const pr = await github.rest.pulls.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `🔧 Auto-Heal: Fix ${{ steps.analyze.outputs.workflow_name }} (Run #${{ github.event.workflow_run.id || github.event.inputs.run_id }})`,
                head: '${{ steps.create_branch.outputs.branch_name }}',
                base: '${{ steps.analyze.outputs.branch }}',
                body: prBody,
                draft: true
              });
              
              console.log(`Created draft PR #${pr.data.number} with @copilot mention`);
              
              // Add labels to the PR
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr.data.number,
                labels: ['auto-heal', 'automated', 'workflow-failure']
              });
              
              // Add a comment to the PR to additionally invoke Copilot
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr.data.number,
                body: '@copilot /fix\n\nPlease analyze the workflow failure in the PR description and implement fixes to resolve the issue. The failure details and error logs are provided above.\n\nFocus on making minimal changes to fix the specific issue identified in the failure analysis.'
              });
              
              // Link the PR to the issue
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: ${{ steps.create_issue.outputs.result }},
                body: `🤖 A draft pull request has been created with GitHub Copilot assigned to implement fixes.\n\n**Pull Request**: #${pr.data.number}\n\nGitHub Copilot will analyze the failure and propose fixes automatically.`
              });
              
              return pr.data.number;
            } catch (error) {
              console.error('Failed to create draft PR:', error);
              console.error('Error details:', JSON.stringify(error, null, 2));
              throw error;
            }
      
      - name: Summary
        run: |
          # Determine if automated fixes were applied
          FIXES_APPLIED="${{ steps.apply_fixes.outputs.fixes_applied }}"
          PR_NUMBER="${{ steps.create_pr.outputs.result }}"
          PLACEHOLDER_PR="${{ steps.create_placeholder_pr.outputs.result }}"
          
          cat >> $GITHUB_STEP_SUMMARY << EOF
          # 🔧 Auto-Heal Workflow Failure Detected
          
          ## Details
          
          - **Workflow**: ${{ steps.analyze.outputs.workflow_name }}
          - **Failed Jobs**: ${{ steps.analyze.outputs.failed_jobs_count }}
          - **Branch**: ${{ steps.analyze.outputs.branch }}
          - **Issue**: #${{ steps.create_issue.outputs.result }}
          - **Auto-heal Branch**: \`${{ steps.create_branch.outputs.branch_name }}\`
          
          ## Actions Taken
          
          ✅ Analyzed workflow failure  
          ✅ Created tracking issue  
          ✅ Prepared healing context  
          ✅ Created and pushed auto-heal branch  
          ${FIXES_APPLIED:+✅ Applied automated fixes  }
          ${PR_NUMBER:+✅ Created pull request #${PR_NUMBER}  }
          ${PLACEHOLDER_PR:+✅ Created draft PR #${PLACEHOLDER_PR} for Copilot Workspace  }
          ${FIXES_APPLIED:-⚠️ No automated fixes available - GitHub Copilot Workspace assistance requested  }
          
          ## Automated Fix Status
          
          ${FIXES_APPLIED:+
          🎉 **Automated fixes successfully applied!**
          
          A pull request has been created with the fixes. Please review and test:
          - **PR**: #${PR_NUMBER}
          - **Branch**: \`${{ steps.create_branch.outputs.branch_name }}\`
          
          }${PLACEHOLDER_PR:+
          🤖 **GitHub Copilot Agent Invoked**
          
          A draft pull request has been created with GitHub Copilot assigned:
          - **Draft PR**: #${PLACEHOLDER_PR}
          - **Branch**: \`${{ steps.create_branch.outputs.branch_name }}\`
          - **Tracking Issue**: #${{ steps.create_issue.outputs.result }}
          
          GitHub Copilot has been mentioned in the PR with @copilot /fix command.
          The agent should analyze the failure and implement fixes automatically.
          
          }${FIXES_APPLIED:-${PLACEHOLDER_PR:-
          ⚠️ **Manual intervention required**
          
          The auto-healing system could not automatically fix this issue. 
          Please review the tracking issue and apply fixes manually, or invoke GitHub Copilot Workspace for assistance.
          
          }}
          
          ## Next Steps
          
          ${FIXES_APPLIED:+1. Review the automated fixes in PR #${PR_NUMBER}
          2. Run the affected workflow to verify the fix
          3. Merge the PR if all tests pass
          4. Close tracking issue #${{ steps.create_issue.outputs.result }}
          }${PLACEHOLDER_PR:+1. Wait for GitHub Copilot agent to implement fixes in PR #${PLACEHOLDER_PR}
          2. Review the implemented fixes when Copilot updates the PR
          3. Mark PR as ready for review when fixes look good
          4. Test the fixes by running the affected workflow
          5. Merge the PR if all tests pass
          6. Close tracking issue #${{ steps.create_issue.outputs.result }}
          }${FIXES_APPLIED:-${PLACEHOLDER_PR:-1. Review the failure analysis in issue #${{ steps.create_issue.outputs.result }}
          2. Checkout branch \`${{ steps.create_branch.outputs.branch_name }}\`
          3. Apply fixes manually or use GitHub Copilot Workspace
          4. Create a pull request with your fixes
          5. Close the tracking issue after merging
          }}
          
          ## Links
          
          - [Tracking Issue](#${{ steps.create_issue.outputs.result }})
          - [Failed Workflow Run](${{ github.event.workflow_run.html_url }})
          ${PR_NUMBER:+- [Auto-heal Pull Request](#${PR_NUMBER})}
          ${PLACEHOLDER_PR:+- [Draft PR with Copilot](#${PLACEHOLDER_PR})}
          
          ---
          *Auto-healing system activated at $(date -u +"%Y-%m-%d %H:%M:%S UTC")*
          EOF
