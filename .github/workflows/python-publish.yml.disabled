# This workflow will upload a Python Package to PyPI when a version is bumped in pyproject.toml
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python#publishing-to-package-registries

name: Upload Python Package

on:
  workflow_dispatch:
    inputs:
      force_publish:
        description: 'Force publishing regardless of version change'
        required: false
        default: 'true'
        type: boolean
      version_override:
        description: 'Override version number (leave empty to use version from pyproject.toml)'
        required: false
        type: string
  push:
    branches:
      - main
    paths:
      - 'pyproject.toml'
      - 'setup.py'

permissions:
  contents: read

jobs:
  version-check:
    runs-on: ubuntu-latest
    outputs:
      version_changed: ${{ steps.check-version.outputs.version_changed }}
      new_version: ${{ steps.check-version.outputs.new_version }}
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2
      
      - name: Check if version changed or manual trigger
        id: check-version
        run: |
          # Check if this is a manual run with version override
          if [[ "${{ github.event_name }}" == "workflow_dispatch" && -n "${{ github.event.inputs.version_override }}" ]]; then
            NEW_VERSION="${{ github.event.inputs.version_override }}"
            echo "Manual trigger with version override. Using version: $NEW_VERSION"
            echo "version_changed=true" >> $GITHUB_OUTPUT
            echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Check if this is a manual run with force_publish
          if [[ "${{ github.event_name }}" == "workflow_dispatch" && "${{ github.event.inputs.force_publish }}" == "true" ]]; then
            NEW_VERSION=$(grep 'version =' pyproject.toml | sed 's/.*version = "\(.*\)".*/\1/')
            echo "Manual trigger with force_publish. Using version: $NEW_VERSION"
            echo "version_changed=true" >> $GITHUB_OUTPUT
            echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # For push events, check if version was changed
          git diff HEAD^ HEAD -- pyproject.toml setup.py | grep -E '[+-]version' || echo "No version change detected"
          if git diff HEAD^ HEAD -- pyproject.toml setup.py | grep -E '[+-]version'; then
            NEW_VERSION=$(grep 'version =' pyproject.toml | sed 's/.*version = "\(.*\)".*/\1/')
            echo "Version changed to: $NEW_VERSION"
            echo "version_changed=true" >> $GITHUB_OUTPUT
            echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          else
            echo "version_changed=false" >> $GITHUB_OUTPUT
          fi

  release-build:
    runs-on: ubuntu-latest
    needs: version-check
    if: needs.version-check.outputs.version_changed == 'true' || github.event_name == 'workflow_dispatch'

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.x"
          cache: 'pip'
          cache-dependency-path: |
            requirements.txt
            install/requirements_base.txt
            install/requirements_github_ci.txt
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine
          # Install CI-specific lightweight dependencies without ONNX
          pip install -r install/requirements_github_ci.txt
      
      - name: Update version in files if override provided
        if: github.event.inputs.version_override != ''
        run: |
          echo "Updating version in files to ${{ github.event.inputs.version_override }}"
          
          # Update version in pyproject.toml
          sed -i 's/version = ".*"/version = "${{ github.event.inputs.version_override }}"/g' pyproject.toml
          
          # Update version in setup.py
          sed -i "s/version='.*'/version='${{ github.event.inputs.version_override }}'/g" setup.py
          sed -i 's/version=".*"/version="${{ github.event.inputs.version_override }}"/g' setup.py
          
          echo "Version updated in files"
      
      - name: Verify setup files
        run: |
          echo "Checking if pyproject.toml and setup.py versions match"
          PYPROJECT_VERSION=$(grep 'version =' pyproject.toml | sed 's/.*version = "\(.*\)".*/\1/')
          SETUP_VERSION=$(grep 'version=' setup.py | sed "s/.*version=['\"]\\(.*\\)['\"].*/\\1/")
          echo "pyproject.toml version: $PYPROJECT_VERSION"
          echo "setup.py version: $SETUP_VERSION"
          
          if [ "$PYPROJECT_VERSION" != "$SETUP_VERSION" ]; then
            echo "ERROR: Version mismatch between pyproject.toml and setup.py"
            exit 1
          fi
          
      - name: Build release distributions
        run: |
          echo "Building Python package version ${{ needs.version-check.outputs.new_version }}"
          # Build with --no-isolation to prevent pip from installing all dependencies
          python -m build --no-isolation
          
      - name: Test built package
        run: |
          python -m twine check dist/*

      - name: Upload distributions
        uses: actions/upload-artifact@v4
        with:
          name: release-dists
          path: dist/

  pypi-publish:
    runs-on: ubuntu-latest
    needs:
      - release-build
      - version-check
    if: needs.version-check.outputs.version_changed == 'true' || github.event_name == 'workflow_dispatch'
    permissions:
      # IMPORTANT: this permission is mandatory for trusted publishing
      id-token: write
      contents: read

    # Dedicated environments with protections for publishing are strongly recommended.
    environment:
      name: pypi
      url: https://pypi.org/project/ipfs_accelerate_py/

    steps:
      - name: Retrieve release distributions
        uses: actions/download-artifact@v4
        with:
          name: release-dists
          path: dist/
          
      - name: Display structure of downloaded files
        run: ls -la dist/

      - name: Publish release distributions to PyPI
        id: publish
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: dist/
          verbose: true
          print-hash: true
          # Uncomment the line below and add your token in GitHub secrets if trusted publishing isn't working
          # password: ${{ secrets.PYPI_API_TOKEN }}
          
      - name: Publish summary
        run: |
          echo "## PyPI Publishing Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: ${{ needs.version-check.outputs.new_version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Event**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Repository**: ${{ github.repository }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Time**: $(date)" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: Published successfully" >> $GITHUB_STEP_SUMMARY
          echo "- **URL**: https://pypi.org/project/ipfs_accelerate_py/${{ needs.version-check.outputs.new_version }}/" >> $GITHUB_STEP_SUMMARY
