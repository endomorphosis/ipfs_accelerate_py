name: ARM64 CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      run_full_tests:
        description: 'Run full test suite (including heavy dependencies)'
        required: false
        default: false
        type: boolean

env:
  PYTHON_VERSION: '3.12'

jobs:
  arm64-containerized-tests:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up QEMU for ARM64 emulation
      uses: docker/setup-qemu-action@v3
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
        
    - name: Display system info
      run: |
        echo "Runner architecture: $(uname -m)"
        echo "Docker version: $(docker --version)"
        echo "Available cores: $(nproc)"
        echo "Available memory: $(free -h | grep Mem)"
        echo "Disk space: $(df -h / | tail -1)"
        
    - name: Free up disk space
      run: |
        echo "=== Before cleanup ==="
        df -h /
        
        # Remove unnecessary software to make space for Docker builds
        sudo rm -rf /usr/share/dotnet /usr/local/lib/android /opt/ghc /opt/hostedtoolcache/CodeQL || true
        sudo apt-get autoremove -y
        sudo apt-get clean
        sudo docker system prune -af --volumes
        
        echo "=== After cleanup ==="
        df -h /
        
    - name: Build ARM64 test container
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/arm64
        target: testing
        build-args: |
          PYTHON_VERSION=${{ env.PYTHON_VERSION }}
        tags: ipfs-accelerate-py:test-arm64
        load: true
        cache-from: type=gha,scope=arm64-test
        cache-to: type=gha,mode=max,scope=arm64-test
        
    - name: Run basic CLI tests in container
      run: |
        IMAGE_TAG="ipfs-accelerate-py:test-arm64"
        
        # Test CLI entry points in isolated container
        docker run --rm --platform linux/arm64 $IMAGE_TAG ipfs-accelerate --help
        docker run --rm --platform linux/arm64 $IMAGE_TAG ipfs_accelerate --help
        
        # Test basic functionality in isolated container
        docker run --rm --platform linux/arm64 $IMAGE_TAG python -m ipfs_accelerate_py.cli_entry --help
        
    - name: Run unit tests in container
      run: |
        IMAGE_TAG="ipfs-accelerate-py:test-arm64"
        
        # Run lightweight tests first in isolated container
        docker run --rm --platform linux/arm64 $IMAGE_TAG bash -c "
        python -m pytest test_cli_validation.py -v --timeout=30 || echo 'Test may have failed'
        "
        
        # Test imports in isolated container
        docker run --rm --platform linux/arm64 $IMAGE_TAG python -c "import ipfs_accelerate_py; print('Package import successful')"
        
    - name: Build and test package wheel in container
      run: |
        IMAGE_TAG="ipfs-accelerate-py:test-arm64"
        
        # Build wheel in isolated container
        docker run --rm --platform linux/arm64 $IMAGE_TAG bash -c "
        pip install build
        python -m build --wheel
        ls -la dist/
        "

  arm64-docker-tests:
    runs-on: ubuntu-latest
    needs: arm64-containerized-tests
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up QEMU for ARM64 emulation
      uses: docker/setup-qemu-action@v3
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build ARM64 Docker image (minimal)
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/arm64
        target: minimal
        tags: ipfs-accelerate-py:ci-test-arm64
        load: true
        cache-from: type=gha,scope=arm64-minimal
        cache-to: type=gha,mode=max,scope=arm64-minimal
        
    - name: Test Docker image
      run: |
        IMAGE_TAG="ipfs-accelerate-py:ci-test-arm64"
        
        # Test CLI commands in isolated container
        docker run --platform linux/arm64 --rm $IMAGE_TAG ipfs-accelerate --help
        docker run --platform linux/arm64 --rm $IMAGE_TAG ipfs_accelerate --help
        
        # Test Python imports in isolated container
        docker run --platform linux/arm64 --rm $IMAGE_TAG python -c "import ipfs_accelerate_py; print('Docker package import successful')"

  arm64-full-tests:
    runs-on: ubuntu-latest
    if: github.event.inputs.run_full_tests == 'true' || github.ref == 'refs/heads/main'
    needs: arm64-docker-tests
    timeout-minutes: 60
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up QEMU for ARM64 emulation
      uses: docker/setup-qemu-action@v3
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
        
    - name: Build full ARM64 development container
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/arm64
        target: development
        build-args: |
          PYTHON_VERSION=${{ env.PYTHON_VERSION }}
        tags: ipfs-accelerate-py:full-arm64
        load: true
        cache-from: type=gha,scope=arm64-full
        cache-to: type=gha,mode=max,scope=arm64-full
        
    - name: Run comprehensive tests in container
      run: |
        IMAGE_TAG="ipfs-accelerate-py:full-arm64"
        
        # Test available functionality in isolated container
        docker run --rm --platform linux/arm64 $IMAGE_TAG python -c "
        try:
            import torch
            print(f'PyTorch available: {torch.__version__}')
            print(f'CUDA available: {torch.cuda.is_available()}')
        except ImportError:
            print('PyTorch not available')
            
        try:
            import transformers
            print(f'Transformers available: {transformers.__version__}')
        except ImportError:
            print('Transformers not available')
        "
        
    - name: Performance benchmark in container
      run: |
        IMAGE_TAG="ipfs-accelerate-py:full-arm64"
        
        # Simple performance test in isolated container
        docker run --rm --platform linux/arm64 $IMAGE_TAG python -c "
        import time
        import numpy as np
        
        # Basic numpy performance test
        start = time.time()
        a = np.random.rand(1000, 1000)
        b = np.random.rand(1000, 1000)
        c = np.dot(a, b)
        end = time.time()
        
        print(f'NumPy matrix multiplication (1000x1000): {end-start:.3f}s')
        print(f'ARM64 performance baseline established')
        "

  security-audit:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build security audit container
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/arm64
        target: development
        build-args: |
          PYTHON_VERSION=${{ env.PYTHON_VERSION }}
        tags: ipfs-accelerate-py:security-audit-arm64
        load: true
        cache-from: type=gha,scope=arm64-security
        cache-to: type=gha,mode=max,scope=arm64-security
        
    - name: Run security audit in container
      run: |
        IMAGE_TAG="ipfs-accelerate-py:security-audit-arm64"
        
        # Run security checks in isolated container
        docker run --rm --platform linux/arm64 $IMAGE_TAG bash -c "
        pip install safety bandit
        
        # Check for known vulnerabilities
        safety check || echo 'Safety check completed with warnings'
        
        # Run static analysis
        bandit -r ipfs_accelerate_py/ -f json -o security-report.json || true
        
        cat security-report.json
        " > security-output.txt
        
    - name: Upload security report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-report-arm64
        path: security-output.txt