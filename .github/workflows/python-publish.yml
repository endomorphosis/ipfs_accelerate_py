# This workflow will upload a Python Package to PyPI when a version is bumped in pyproject.toml
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python#publishing-to-package-registries

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Upload Python Package

on:
  push:
    branches:
      - main
    paths:
      - 'pyproject.toml'
  workflow_dispatch:
    inputs:
      force_publish:
        description: 'Force publishing regardless of version change'
        required: false
        default: 'false'
        type: boolean

permissions:
  contents: read

jobs:
  version-check:
    runs-on: ubuntu-latest
    outputs:
      version_changed: ${{ steps.check-version.outputs.version_changed }}
      new_version: ${{ steps.check-version.outputs.new_version }}
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2
      
      - name: Check if version changed or manual trigger
        id: check-version
        run: |
          # Check if this is a manual run with force_publish
          if [[ "${{ github.event_name }}" == "workflow_dispatch" && "${{ github.event.inputs.force_publish }}" == "true" ]]; then
            NEW_VERSION=$(grep 'version =' pyproject.toml | sed 's/.*version = "\(.*\)".*/\1/')
            echo "Manual trigger with force_publish. Using version: $NEW_VERSION"
            echo "version_changed=true" >> $GITHUB_OUTPUT
            echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # For push events, check if version was changed
          git diff HEAD^ HEAD -- pyproject.toml | grep '+version' || echo "No version change detected"
          if git diff HEAD^ HEAD -- pyproject.toml | grep '+version'; then
            NEW_VERSION=$(grep 'version =' pyproject.toml | sed 's/.*version = "\(.*\)".*/\1/')
            echo "Version changed to: $NEW_VERSION"
            echo "version_changed=true" >> $GITHUB_OUTPUT
            echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          else
            echo "version_changed=false" >> $GITHUB_OUTPUT
          fi

  release-build:
    runs-on: ubuntu-latest
    needs: version-check
    if: needs.version-check.outputs.version_changed == 'true' || github.event.inputs.force_publish == 'true'

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.x"
          
      - name: Build release distributions
        run: |
          echo "Building Python package version ${{ needs.version-check.outputs.new_version }}"
          python -m pip install build
          python -m build

      - name: Upload distributions
        uses: actions/upload-artifact@v4
        with:
          name: release-dists
          path: dist/

  pypi-publish:
    runs-on: ubuntu-latest
    needs:
      - release-build
      - version-check
    if: needs.version-check.outputs.version_changed == 'true' || github.event.inputs.force_publish == 'true'
    permissions:
      # IMPORTANT: this permission is mandatory for trusted publishing
      id-token: write

    # Dedicated environments with protections for publishing are strongly recommended.
    # For more information, see: https://docs.github.com/en/actions/deployment/targeting-different-environments/using-environments-for-deployment#deployment-protection-rules
    environment:
      name: pypi
      # PyPI project URL in the deployment status:
      url: https://pypi.org/project/ipfs_accelerate_py/

    steps:
      - name: Retrieve release distributions
        uses: actions/download-artifact@v4
        with:
          name: release-dists
          path: dist/

      - name: Publish release distributions to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: dist/
