name: IPFS Accelerate Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test-matrix:
    name: Test on ${{ matrix.os }} / Python ${{ matrix.python-version }} / ${{ matrix.test-type }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: [3.8, 3.9, "3.10"]
        test-type: [model, hardware, api, integration]
        exclude:
          # Exclude hardware tests on specific platforms
          - os: windows-latest
            test-type: hardware
          # Add more exclusions as needed
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install pytest pytest-html pytest-cov
        if [ -f test/requirements.txt ]; then pip install -r test/requirements.txt; fi
      shell: bash
    
    - name: Verify test environment
      run: |
        cd test
        python verify_test_environment.py
      shell: bash
    
    - name: Run tests
      run: |
        cd test
        python run.py --test-type ${{ matrix.test-type }} --ci --junit-xml
      shell: bash
    
    - name: Upload test results
      uses: actions/upload-artifact@v3
      with:
        name: test-results-${{ matrix.os }}-py${{ matrix.python-version }}-${{ matrix.test-type }}
        path: test/test-results.xml
      if: always()

  distributed-tests:
    name: Distributed Testing
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.9
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install pytest pytest-xdist
        if [ -f test/requirements.txt ]; then pip install -r test/requirements.txt; fi
      shell: bash
    
    - name: Run distributed tests
      run: |
        cd test
        python run.py --distributed --worker-count 4 --test-type integration --ci
      shell: bash
    
    - name: Upload test results
      uses: actions/upload-artifact@v3
      with:
        name: test-results-distributed
        path: test/test-results.xml
      if: always()

  browser-tests:
    name: Browser Integration Tests
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.9
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install pytest pytest-selenium
        if [ -f test/requirements.txt ]; then pip install -r test/requirements.txt; fi
      shell: bash
    
    - name: Set up Chrome
      uses: browser-actions/setup-chrome@latest
    
    - name: Set up Firefox
      uses: browser-actions/setup-firefox@latest
    
    - name: Run browser tests
      run: |
        cd test
        python run.py --test-type integration --markers "browser" --ci
      shell: bash
    
    - name: Upload test results
      uses: actions/upload-artifact@v3
      with:
        name: test-results-browser
        path: test/test-results.xml
      if: always()

  report:
    name: Generate Combined Test Report
    needs: [test-matrix, distributed-tests, browser-tests]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.9
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install pytest pytest-html junitparser
      shell: bash
    
    - name: Download all artifacts
      uses: actions/download-artifact@v3
      with:
        path: artifacts
    
    - name: Combine test reports
      run: |
        python -c "
        import glob
        import os
        from junitparser import JUnitXml

        # Find all XML files
        xml_files = glob.glob('artifacts/**/test-results.xml', recursive=True)
        
        # Combine XML files
        combined = JUnitXml()
        for xml_file in xml_files:
            try:
                combined += JUnitXml.fromfile(xml_file)
            except Exception as e:
                print(f'Error processing {xml_file}: {e}')
        
        # Write combined XML
        os.makedirs('test-results', exist_ok=True)
        combined.write('test-results/combined.xml')
        "
      shell: bash
    
    - name: Generate HTML report
      run: |
        pytest --html=test-results/report.html --self-contained-html --junitxml=test-results/combined.xml
      shell: bash
    
    - name: Upload combined report
      uses: actions/upload-artifact@v3
      with:
        name: combined-test-report
        path: test-results/