#!/usr/bin/env python3
"""
Centralized Hardware Detection Module

This module provides a standardized, centralized interface for hardware detection
across all test generators and test files in the project. It ensures consistency
in hardware detection and hardware-aware optimizations.

Key features:
- Reliable detection of CPU, CUDA, ROCm, MPS, OpenVINO, Qualcomm, WebNN, and WebGPU
- Web platform optimization management for WebGPU compute shaders, parallel loading, and shader precompilation
- Browser detection for platform-specific optimizations (especially Firefox WebGPU)
- Hardware capability reporting
- Integration with test generators

Usage:
    from centralized_hardware_detection.hardware_detection import HardwareManager
    
    # Get hardware capabilities
    hw_manager = HardwareManager()
    capabilities = hw_manager.get_capabilities()
    
    # Check specific hardware
    if hw_manager.has_cuda:
        # CUDA-specific code
        
    # Get web platform optimizations
    audio_optimizations = hw_manager.get_web_optimizations("audio", "WebGPU")
"""

import os
import importlib.util
import logging
from typing import Dict, List, Any, Tuple, Set, Optional, Union

# Configure logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger("hardware_detection")

class HardwareManager:
    """
    Centralized manager for hardware detection and capabilities.
    Provides a unified interface for accessing hardware information.
    """
    
    def __init__(self):
        """Initialize hardware detection."""
        # Try to import torch (for CUDA/ROCm/MPS)
        try:
            import torch
            self.torch = torch
            self.has_torch = True
        except ImportError:
            from unittest.mock import MagicMock
            self.torch = MagicMock()
            self.has_torch = False
            logger.warning("torch not available, using mock")
            
        # Initialize hardware capability flags
        self.has_cuda = False
        self.has_rocm = False
        self.has_mps = False
        self.has_openvino = False
        self.has_qualcomm = False
        self.has_webnn = False
        self.has_webgpu = False
        
        # Detect hardware
        self._detect_hardware()
        
        # Store complete capabilities
        self.capabilities = self._check_hardware()
        
        # Web optimization information
        self.browser_info = self._detect_browser()
    
    def _detect_hardware(self):
        """Detect available hardware."""
        # CUDA detection
        if self.has_torch:
            self.has_cuda = self.torch.cuda.is_available()
            
            # ROCm detection
            if self.has_cuda and hasattr(self.torch, '_C') and hasattr(self.torch._C, '_rocm_version'):
                self.has_rocm = True
            elif 'ROCM_HOME' in os.environ:
                self.has_rocm = True
            
            # Apple MPS detection
            if hasattr(self.torch, "mps") and hasattr(self.torch.mps, "is_available"):
                self.has_mps = self.torch.mps.is_available()
        
        # OpenVINO detection
        self.has_openvino = importlib.util.find_spec("openvino") is not None
        
        # Qualcomm detection
        self.has_qualcomm = (
            importlib.util.find_spec("qnn_wrapper") is not None or
            importlib.util.find_spec("qti") is not None or
            "QUALCOMM_SDK" in os.environ
        )
        
        # WebNN detection (browser API or simulation)
        self.has_webnn = (
            importlib.util.find_spec("webnn") is not None or 
            importlib.util.find_spec("webnn_js") is not None or
            "WEBNN_AVAILABLE" in os.environ or
            "WEBNN_SIMULATION" in os.environ
        )
        
        # WebGPU detection (browser API or simulation)
        self.has_webgpu = (
            importlib.util.find_spec("webgpu") is not None or
            importlib.util.find_spec("wgpu") is not None or
            "WEBGPU_AVAILABLE" in os.environ or
            "WEBGPU_SIMULATION" in os.environ
        )
    
    def _check_hardware(self) -> Dict[str, Any]:
        """Generate comprehensive hardware capability information."""
        capabilities = {
            "cpu": True,
            "cuda": False,
            "cuda_version": None,
            "cuda_devices": 0,
            "mps": False,
            "openvino": False,
            "qualcomm": False,
            "rocm": False,
            "webnn": False,
            "webgpu": False
        }
        
        # CUDA capabilities
        if self.has_torch and self.has_cuda:
            capabilities["cuda"] = True
            capabilities["cuda_devices"] = self.torch.cuda.device_count()
            capabilities["cuda_version"] = self.torch.version.cuda
        
        # MPS capabilities (Apple Silicon)
        capabilities["mps"] = self.has_mps
        
        # OpenVINO capabilities
        capabilities["openvino"] = self.has_openvino
        
        # Qualcomm capabilities
        capabilities["qualcomm"] = self.has_qualcomm
        
        # ROCm capabilities
        capabilities["rocm"] = self.has_rocm
        
        # WebNN capabilities
        capabilities["webnn"] = self.has_webnn
        
        # WebGPU capabilities
        capabilities["webgpu"] = self.has_webgpu
        
        return capabilities
    
    def _detect_browser(self) -> Dict[str, Any]:
        """
        Detect browser type for optimizations, particularly for 
        Firefox WebGPU compute shader optimizations.
        """
        # Start with default (simulation environment)
        browser_info = {
            "is_browser": False,
            "browser_type": "unknown",
            "is_firefox": False,
            "is_chrome": False,
            "is_edge": False,
            "is_safari": False,
            "supports_compute_shaders": False,
            "workgroup_size": [128, 1, 1]  # Default workgroup size
        }
        
        # Try to detect browser environment
        try:
            import js
            if hasattr(js, 'navigator'):
                browser_info["is_browser"] = True
                user_agent = js.navigator.userAgent.lower()
                
                # Detect browser type
                if "firefox" in user_agent:
                    browser_info["browser_type"] = "firefox"
                    browser_info["is_firefox"] = True
                    browser_info["supports_compute_shaders"] = True
                    browser_info["workgroup_size"] = [256, 1, 1]  # Firefox optimized workgroup size
                elif "chrome" in user_agent:
                    browser_info["browser_type"] = "chrome"
                    browser_info["is_chrome"] = True
                    browser_info["supports_compute_shaders"] = True
                elif "edg" in user_agent:
                    browser_info["browser_type"] = "edge"
                    browser_info["is_edge"] = True
                    browser_info["supports_compute_shaders"] = True
                elif "safari" in user_agent:
                    browser_info["browser_type"] = "safari"
                    browser_info["is_safari"] = True
                    browser_info["supports_compute_shaders"] = False  # Safari has limited compute shader support
        except (ImportError, AttributeError):
            # Not in a browser environment
            pass
        
        # Check environment variables for browser simulation
        if os.environ.get("SIMULATE_FIREFOX", "0") == "1":
            browser_info["browser_type"] = "firefox"
            browser_info["is_firefox"] = True
            browser_info["supports_compute_shaders"] = True
            browser_info["workgroup_size"] = [256, 1, 1]
        
        return browser_info
    
    def get_capabilities(self) -> Dict[str, Any]:
        """Get all hardware capabilities."""
        return self.capabilities
    
    def get_web_optimizations(self, model_type: str, implementation_type: Optional[str] = None) -> Dict[str, bool]:
        """
        Get optimizations for web platform based on model type and implementation.
        
        Args:
            model_type: Type of model (audio, multimodal, etc.)
            implementation_type: Implementation type (WebNN, WebGPU)
            
        Returns:
            Dict of optimization settings
        """
        optimizations = {
            "compute_shaders": False,
            "parallel_loading": False,
            "shader_precompile": False
        }
        
        # Check for optimization environment flags
        compute_shaders_enabled = (
            os.environ.get("WEBGPU_COMPUTE_SHADERS_ENABLED", "0") == "1" or
            os.environ.get("WEBGPU_COMPUTE_SHADERS", "0") == "1"
        )
        
        parallel_loading_enabled = (
            os.environ.get("WEB_PARALLEL_LOADING_ENABLED", "0") == "1" or
            os.environ.get("PARALLEL_LOADING_ENABLED", "0") == "1"
        )
        
        shader_precompile_enabled = (
            os.environ.get("WEBGPU_SHADER_PRECOMPILE_ENABLED", "0") == "1" or
            os.environ.get("WEBGPU_SHADER_PRECOMPILE", "0") == "1"
        )
        
        # Enable all optimizations flag
        if os.environ.get("WEB_ALL_OPTIMIZATIONS", "0") == "1":
            compute_shaders_enabled = True
            parallel_loading_enabled = True
            shader_precompile_enabled = True
        
        # Only apply WebGPU compute shaders for audio models
        if compute_shaders_enabled and implementation_type == "WebGPU" and model_type == "audio":
            optimizations["compute_shaders"] = True
        
        # Only apply parallel loading for multimodal models
        if parallel_loading_enabled and model_type == "multimodal":
            optimizations["parallel_loading"] = True
        
        # Apply shader precompilation for most model types with WebGPU
        if shader_precompile_enabled and implementation_type == "WebGPU":
            optimizations["shader_precompile"] = True
        
        return optimizations
    
    def get_browser_info(self) -> Dict[str, Any]:
        """Get detected browser information."""
        return self.browser_info
    
    def get_workgroup_size(self) -> List[int]:
        """Get optimal workgroup size for the current browser."""
        return self.browser_info["workgroup_size"]
    
    def is_firefox(self) -> bool:
        """Check if the current browser is Firefox."""
        return self.browser_info["is_firefox"]
    
    def is_chrome(self) -> bool:
        """Check if the current browser is Chrome."""
        return self.browser_info["is_chrome"]
    
    def supports_compute_shaders(self) -> bool:
        """Check if the current browser supports compute shaders."""
        return self.browser_info["supports_compute_shaders"]
    
    def get_hardware_detection_code(self) -> str:
        """
        Generate hardware detection code that can be inserted into templates.
        Returns Python code as a string.
        """
        code = """
# Hardware Detection
import os
import importlib.util

# Try to import torch first (needed for CUDA/ROCm/MPS)
try:
    import torch
    HAS_TORCH = True
except ImportError:
    from unittest.mock import MagicMock
    torch = MagicMock()
    HAS_TORCH = False
    logger.warning("torch not available, using mock")

# Initialize hardware capability flags
HAS_CUDA = False
HAS_ROCM = False
HAS_MPS = False
HAS_OPENVINO = False
HAS_WEBNN = False
HAS_WEBGPU = False

# CUDA detection
if HAS_TORCH:
    HAS_CUDA = torch.cuda.is_available()
    
    # ROCm detection
    if HAS_CUDA and hasattr(torch, '_C') and hasattr(torch._C, '_rocm_version'):
        HAS_ROCM = True
    elif 'ROCM_HOME' in os.environ:
        HAS_ROCM = True
    
    # Apple MPS detection
    if hasattr(torch, "mps") and hasattr(torch.mps, "is_available"):
        HAS_MPS = torch.mps.is_available()

# OpenVINO detection
HAS_OPENVINO = importlib.util.find_spec("openvino") is not None

# WebNN detection (browser API)
HAS_WEBNN = (
    importlib.util.find_spec("webnn") is not None or 
    importlib.util.find_spec("webnn_js") is not None or
    "WEBNN_AVAILABLE" in os.environ or
    "WEBNN_SIMULATION" in os.environ
)

# WebGPU detection (browser API)
HAS_WEBGPU = (
    importlib.util.find_spec("webgpu") is not None or
    importlib.util.find_spec("wgpu") is not None or
    "WEBGPU_AVAILABLE" in os.environ or
    "WEBGPU_SIMULATION" in os.environ
)

# Hardware detection function for comprehensive hardware info
def check_hardware():
    \"\"\"Check available hardware and return capabilities.\"\"\"
    capabilities = {
        "cpu": True,
        "cuda": False,
        "cuda_version": None,
        "cuda_devices": 0,
        "mps": False,
        "openvino": False,
        "rocm": False,
        "webnn": False,
        "webgpu": False
    }
    
    # CUDA capabilities
    if HAS_TORCH and HAS_CUDA:
        capabilities["cuda"] = True
        capabilities["cuda_devices"] = torch.cuda.device_count()
        capabilities["cuda_version"] = torch.version.cuda
    
    # MPS capabilities (Apple Silicon)
    capabilities["mps"] = HAS_MPS
    
    # OpenVINO capabilities
    capabilities["openvino"] = HAS_OPENVINO
    
    # ROCm capabilities
    capabilities["rocm"] = HAS_ROCM
    
    # WebNN capabilities
    capabilities["webnn"] = HAS_WEBNN
    
    # WebGPU capabilities
    capabilities["webgpu"] = HAS_WEBGPU
    
    return capabilities

# Get hardware capabilities
HW_CAPABILITIES = check_hardware()
"""
        return code
    
    def get_model_hardware_compatibility(self, model_name: str) -> Dict[str, bool]:
        """
        Determine hardware compatibility for a specific model.
        
        Args:
            model_name: Name/type of the model to check
            
        Returns:
            Dict indicating which hardware platforms are compatible
        """
        # Base compatibility that's always available
        compatibility = {
            "cpu": True,
            "cuda": self.has_cuda,
            "openvino": self.has_openvino,
            "mps": self.has_mps,
            "qualcomm": self.has_qualcomm,
            "rocm": self.has_rocm,
            "webnn": self.has_webnn,
            "webgpu": self.has_webgpu
        }
        
        # Special cases for specific model families
        model_name = model_name.lower()
        
        # Multimodal models like LLaVA may have limited support
        if "llava" in model_name:
            compatibility["mps"] = False  # Limited MPS support for LLaVA
            compatibility["webnn"] = False  # Limited WebNN support for LLaVA
            compatibility["webgpu"] = False  # Limited WebGPU support for LLaVA
        
        # Audio models have limited web support
        if any(audio_model in model_name for audio_model in ["whisper", "wav2vec2", "clap", "hubert"]):
            # Audio models have limited but improving web support
            compatibility["webnn"] = compatibility["webnn"] and "WEBNN_AUDIO_SUPPORT" in os.environ
            compatibility["webgpu"] = compatibility["webgpu"] and "WEBGPU_AUDIO_SUPPORT" in os.environ
        
        # LLMs may have limited web support due to size
        if any(llm in model_name for llm in ["llama", "gpt", "falcon", "mixtral", "qwen"]):
            compatibility["webnn"] = compatibility["webnn"] and "WEBNN_LLM_SUPPORT" in os.environ
            compatibility["webgpu"] = compatibility["webgpu"] and "WEBGPU_LLM_SUPPORT" in os.environ
            
        return compatibility

# Create singleton instance
HARDWARE_MANAGER = HardwareManager()

# Convenience functions for importing 
def get_hardware_manager():
    """Get the HardwareManager singleton instance."""
    return HARDWARE_MANAGER

def get_capabilities():
    """Get hardware capabilities."""
    return HARDWARE_MANAGER.get_capabilities()

def get_web_optimizations(model_type, implementation_type=None):
    """Get web platform optimizations."""
    return HARDWARE_MANAGER.get_web_optimizations(model_type, implementation_type)

def get_browser_info():
    """Get browser information."""
    return HARDWARE_MANAGER.get_browser_info()

def get_hardware_detection_code():
    """Get hardware detection code for templates."""
    return HARDWARE_MANAGER.get_hardware_detection_code()

def get_model_hardware_compatibility(model_name):
    """Get hardware compatibility for a model."""
    return HARDWARE_MANAGER.get_model_hardware_compatibility(model_name)