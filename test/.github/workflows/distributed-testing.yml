name: Distributed Testing Framework

on:
  push:
    branches: [ main ]
    paths:
      - 'test/duckdb_api/distributed_testing/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'test/duckdb_api/distributed_testing/**'
  workflow_dispatch:
    inputs:
      test_type:
        description: 'Test type to run (all, integration, fault, monitoring, stress)'
        required: false
        default: 'all'
      test_filter:
        description: 'Test filter pattern'
        required: false
        default: ''
      hardware:
        description: 'Hardware to test on (comma-separated: cpu,cuda,webgpu)'
        required: false
        default: 'cpu'
      timeout:
        description: 'Timeout in seconds'
        required: false
        default: '3600'

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up test matrix
        id: set-matrix
        run: |
          # Determine test types based on input (or default to core set)
          TEST_TYPE="${{ github.event.inputs.test_type || 'all' }}"
          
          if [ "$TEST_TYPE" == "all" ]; then
            TYPES='["integration", "fault", "monitoring", "stress"]'
          else
            TYPES="[\"$TEST_TYPE\"]"
          fi
          
          echo "matrix={\"test_type\":$TYPES}" >> $GITHUB_OUTPUT

  test:
    needs: prepare
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.prepare.outputs.matrix) }}
    env:
      TEST_TYPE: ${{ matrix.test_type }}
      TEST_FILTER: ${{ github.event.inputs.test_filter || '' }}
      COORDINATOR_URL: ${{ secrets.COORDINATOR_URL || 'http://localhost:8080' }}
      API_KEY: ${{ secrets.COORDINATOR_API_KEY || 'test_key' }}
      TIMEOUT: ${{ github.event.inputs.timeout || '3600' }}
      
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f test/duckdb_api/distributed_testing/requirements.test.txt ]; then
            pip install -r test/duckdb_api/distributed_testing/requirements.test.txt
          else
            pip install pytest pytest-cov pytest-timeout flask flask-cors flask-socketio websocket-client
          fi
          # Ensure PYTHONPATH includes the repository root
          echo "PYTHONPATH=$PYTHONPATH:$(pwd)" >> $GITHUB_ENV
      
      # Set up local coordinator for testing
      - name: Set up coordinator (non-production mode)
        if: ${{ !secrets.COORDINATOR_URL }}
        run: |
          # Start coordinator in background
          python -m duckdb_api.distributed_testing.run_coordinator_with_dashboard --host 0.0.0.0 --port 8080 --db-path /tmp/test_db.duckdb --no-auth > /tmp/coordinator.log 2>&1 &
          echo "COORDINATOR_PID=$!" >> $GITHUB_ENV
          
          # Allow coordinator to start
          sleep 5
          
          # Verify coordinator is running
          curl http://localhost:8080/health || { echo "Coordinator failed to start"; cat /tmp/coordinator.log; exit 1; }
          
          # Start worker with CPU capabilities
          python -m duckdb_api.distributed_testing.worker --coordinator ws://localhost:8080 --worker-id github-worker-cpu --capabilities '{"hardware_types":["cpu"],"cpu_cores":2,"memory_gb":7}' > /tmp/worker_cpu.log 2>&1 &
          echo "WORKER_CPU_PID=$!" >> $GITHUB_ENV
          
          # Allow worker to connect
          sleep 2
      
      # Run tests based on matrix type
      - name: Run ${{ matrix.test_type }} tests
        id: run-tests
        run: |
          cd test/duckdb_api/distributed_testing
          
          # Create output directory
          mkdir -p test_output/${{ matrix.test_type }}
          
          if [[ "${{ matrix.test_type }}" == "integration" ]]; then
            # Run integration tests
            python -m duckdb_api.distributed_testing.tests.run_integration_tests --verbose --output test_output/${{ matrix.test_type }}/results.json ${{ env.TEST_FILTER }}
          elif [[ "${{ matrix.test_type }}" == "fault" ]]; then
            # Run fault tolerance tests
            python -m duckdb_api.distributed_testing.tests.test_load_balancer_fault_tolerance -v
          elif [[ "${{ matrix.test_type }}" == "monitoring" ]]; then
            # Run monitoring tests
            python -m duckdb_api.distributed_testing.tests.test_load_balancer_monitoring -v
          elif [[ "${{ matrix.test_type }}" == "stress" ]]; then
            # Run stress tests with shorter duration for CI
            python -m duckdb_api.distributed_testing.test_load_balancer_stress --verbose --workers 3 --tests 50 --duration 60
          else
            echo "Unknown test type: ${{ matrix.test_type }}"
            exit 1
          fi
          
          # Record test status
          echo "status=$?" >> $GITHUB_OUTPUT

      # Generate coverage report
      - name: Generate coverage report
        if: ${{ always() && steps.run-tests.outputs.status != '' }}
        run: |
          cd test/duckdb_api/distributed_testing
          python -m pytest --cov=duckdb_api.distributed_testing --cov-report=xml:test_output/${{ matrix.test_type }}/coverage.xml

      # Upload coverage to Codecov
      - name: Upload coverage to Codecov
        if: ${{ always() && steps.run-tests.outputs.status != '' }}
        uses: codecov/codecov-action@v3
        with:
          files: test/duckdb_api/distributed_testing/test_output/${{ matrix.test_type }}/coverage.xml
          flags: ${{ matrix.test_type }}
          name: distributed-testing-${{ matrix.test_type }}
          fail_ci_if_error: false
          
      # Upload test artifacts
      - name: Upload test artifacts
        if: ${{ always() && steps.run-tests.outputs.status != '' }}
        uses: actions/upload-artifact@v3
        with:
          name: test-results-${{ matrix.test_type }}
          path: test/duckdb_api/distributed_testing/test_output/${{ matrix.test_type }}
          retention-days: 14

      # Create JSON result file for badge
      - name: Create badge data
        if: ${{ always() && steps.run-tests.outputs.status != '' }}
        run: |
          cd test/duckdb_api/distributed_testing
          mkdir -p .github/badges
          
          if [ "${{ steps.run-tests.outputs.status }}" == "0" ]; then
            STATUS="passing"
            COLOR="green"
          else
            STATUS="failing"
            COLOR="red"
          fi
          
          # Create JSON file for badge
          cat > .github/badges/${{ matrix.test_type }}-status.json << EOF
          {
            "schemaVersion": 1,
            "label": "${{ matrix.test_type }} tests",
            "message": "$STATUS",
            "color": "$COLOR"
          }
          EOF

      # Clean up coordinator if we started one
      - name: Clean up
        if: ${{ always() && env.COORDINATOR_PID != '' }}
        run: |
          if [ -n "$WORKER_CPU_PID" ]; then
            kill $WORKER_CPU_PID || true
          fi
          
          if [ -n "$COORDINATOR_PID" ]; then
            kill $COORDINATOR_PID || true
          fi

  # Generate combined report
  report:
    needs: test
    runs-on: ubuntu-latest
    if: ${{ always() }}
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: Download all test results
        uses: actions/download-artifact@v3
        with:
          path: test-results
      
      - name: Set up test badge directory
        run: |
          mkdir -p test/duckdb_api/distributed_testing/.github/badges
      
      - name: Generate combined badge
        run: |
          # Check if any tests failed
          FAILED=0
          for TYPE in integration fault monitoring stress; do
            if [ -f "test-results/test-results-$TYPE" ] && grep -q '"status":1' "test-results/test-results-$TYPE"; then
              FAILED=1
              break
            fi
          done
          
          # Create badge JSON
          if [ "$FAILED" == "0" ]; then
            STATUS="passing"
            COLOR="green"
          else
            STATUS="failing"
            COLOR="red"
          fi
          
          # Create combined status badge
          cat > test/duckdb_api/distributed_testing/.github/badges/combined-status.json << EOF
          {
            "schemaVersion": 1,
            "label": "tests",
            "message": "$STATUS",
            "color": "$COLOR"
          }
          EOF
      
      - name: Create combined report
        run: |
          cd test/duckdb_api/distributed_testing
          python -m duckdb_api.distributed_testing.github_badge_generator
      
      - name: Update README with badges
        run: |
          cd test/duckdb_api/distributed_testing
          
          # Check if README exists
          if [ -f "README.md" ]; then
            # Add badges section if it doesn't exist
            if ! grep -q "## Test Status" README.md; then
              cat >> README.md << EOF
          
          ## Test Status
          
          ![Combined Tests](https://img.shields.io/endpoint?url=https://raw.githubusercontent.com/username/repo/main/test/duckdb_api/distributed_testing/.github/badges/combined-status.json)
          ![Integration Tests](https://img.shields.io/endpoint?url=https://raw.githubusercontent.com/username/repo/main/test/duckdb_api/distributed_testing/.github/badges/integration-status.json)
          ![Fault Tolerance Tests](https://img.shields.io/endpoint?url=https://raw.githubusercontent.com/username/repo/main/test/duckdb_api/distributed_testing/.github/badges/fault-status.json)
          ![Monitoring Tests](https://img.shields.io/endpoint?url=https://raw.githubusercontent.com/username/repo/main/test/duckdb_api/distributed_testing/.github/badges/monitoring-status.json)
          ![Stress Tests](https://img.shields.io/endpoint?url=https://raw.githubusercontent.com/username/repo/main/test/duckdb_api/distributed_testing/.github/badges/stress-status.json)
          EOF
            fi
          fi
      
      - name: Commit and push badge updates
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: "Update test status badges [skip ci]"
          file_pattern: |
            test/duckdb_api/distributed_testing/.github/badges/*.json
            test/duckdb_api/distributed_testing/README.md